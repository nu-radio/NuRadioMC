weights:
  weight_mode: core_mantle_crust # options are 'null': all weights will be set to 1. 'existing': weights from the input file will be used, 'core_mantle_crust': use the three layer earth model, which considers the different densities of the core, mantle and crust. simple: use the simple earth model, which apply a constant earth density, more options are available, check utilities.earth_attenuation for all available models
  cross_section_type: ctw # neutrino cross section: ghandi : according to Ghandi et al. Phys.Rev.D58:093009,1998, ctw    : A. Connolly, R. S. Thorne, and D. Waters, Phys. Rev.D 83, 113009 (2011)., csms: A. Cooper-Sarkar, P. Mertsch, S. Sarkar, JHEP 08 (2011) 042

noise: False  # specify if simulation should be run with or without noise
sampling_rate: 5.  # sampling rate in GHz used internally in the simulation. At the end the waveforms will be downsampled to the sampling rate specified in the detector description

split_event_time_diff: 1e6  # the minimal time difference (in ns) between two voltage trace start times at the digitizer to split an event into two

seed: 1235

speedup:
  minimum_weight_cut: 1.e-5
  delta_C_cut: 0.698  # 40 degree
  redo_raytracing: False  # redo ray tracing even if previous calculated ray tracing solutions are present
  min_efield_amplitude: 2  # the minimum signal amplitude of the efield as a factor of the noise RMS. If the value is smaller, no detector simulation is performed. As the vector effecive length of antennas is typically less than 1, this cut does not introduce any bias as long as the value is smaller than the trigger threshold.
  amp_per_ray_solution: True  # if False, the maximum aplitude for each ray tracing solution is not calculated
  time_res_efieldconverter: 0.1  # the time resolution (in ns) used in the efieldtovoltage converter to combine multiple efield traces into one voltage trace
  distance_cut: False # if True, a cut for the vertex-observer distance as a function of shower energy is applied (log10(max_dist / m) = polynomial(log10(shower_energy / eV))
  # The coefficients of a polynomial below have been obtained from distance histograms for several shower energy bins. A 10x10 array of 1.5 sigma dipoles in Greenland was used. The distance cut is a 4th order polynomial of the maximum distances with a cover factor of 1.5, or 50%.
  distance_cut_coefficients: [-1.56434411e+02,  2.54131322e+01, -1.34932379e+00,  2.39984185e-02] # coefficients of a polynomial
  distance_cut_sum_length: 10  # the distance (in meters) over which the shower energies of the surrounding showers are added up

propagation:
  module: analytic  # can also be "radiopropa"
  ice_model: southpole_2015  # can also be "custom", then it needs to be passed directly to the simulation class
  attenuation_model: SP1
  attenuate_ice: True # if True apply the frequency dependent attenuation due to propagating through ice. (Note: The 1/R amplitude scaling will be applied in either case.)
  n_freq: 25  # the number of frequencies where the attenuation length is calculated for. The remaining frequencies will be determined from a linear interpolation between the reference frequencies. The reference frequencies are equally spaced over the complet frequency range.
  focusing: False  # if True apply the focusing effect.
  focusing_limit: 2  # the maximum amplification factor of the focusing correction
  n_reflections: 0  # the maximum number of reflections off a reflective layer at the bottom of the ice layer
  birefringence: False  # if True apply birefringence effects
  birefringence_propagation: 'analytical'  # can also be 'numerical' - Does not have to be set, default value is 'analytical'
  birefringence_model: 'southpole_A'  # can also be 'southpole_' or 'greenland_': 'A', 'B', 'C', 'D', 'E' - Does not have to be set, default value is 'southpole_A'. See 'https://nu-radio.github.io/NuRadioMC/NuRadioMC/pages/Manuals/icemodels.html' for more details.
  angle_to_iceflow: -131 #The angle between the ice flow direction and the easting direction. About -131 for South Pole and 180 for Greenland. See 'https://nu-radio.github.io/NuRadioMC/NuRadioMC/pages/Manuals/icemodels.html' for more details.

  radiopropa:  #every module can have its own addition settings
    mode: iterative  # can also be "minimizing" but these ray tracing solution are not accurate yet
    iter_steps_channel: [25., 2., .5]  #radial size of spheres (in meter) around channels to find solutions iteratively
    iter_steps_zenith: [.5, .05, .005]  #the anglular resolution (in degrees) in zenith of the launch vector to find solutions iteratively
    auto_step_size: False  #automatically set angular step with respect to distance of vertex and sphere size around channel to find solutions iteratively
    max_traj_length: 10000  #(in meter) if the trajectory has not yet reached a observer and the path length is bigger than this value, the simulation of that path  is stopped

signal:
  model: Alvarez2009
  zerosignal: False  # if True, the signal is set to zero. This is useful to study 'noise' only simulations
  polarization: auto # can be either 'auto' or 'custom'
  ePhi: 0.  # only used if 'polarization = custom', fraction of ePhi component, the eTheta component is eTheta = (1 - ePhi**2)**0.5
  shower_type: null # optional argument to only simulate certain shower types. Arguments can be "had" or "em".

trigger:
  noise_temperature: 300  # in Kelvin, can also be set to "detector" to use the station/channel specific noise temperature from the detector description
  Vrms: null  # the RMS noise value in volts. Not compatible with 'noise_temperature', if Vrms is set, 'noise_temperature' must be None

output:
  channel_traces: True
  electric_field_traces: True
  sim_channel_traces: True
  sim_electric_field_traces: True
