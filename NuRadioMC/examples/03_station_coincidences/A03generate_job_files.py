from NuRadioMC.EvtGen import generator
from NuRadioMC.utilities import units
import numpy as np
import glob
import os
import sys


"""
This example creates job files for simulations to check for coincidences. The
number of events per file is controlled with n_events_per_file.

The arguments to pass to this file are, in order:

software: the directory where NuRadioMC, NuRadioReco and radiotools are installed

working_dir: the directory where the job files are going to be stored (input,
run and output files)

conf_dir: the directory where the configuration file is located

event_files_dir: the directory where the event files generated by
A01generate_event_list.py are located

The default parameters are those used for Christian's cluster, but they can be
changed below.

*** IMPORTANT ***

Do not forget to change the header variable to include all the instructions
and paths that are needed to operate your cluster. Otherwise the example will
not work.

"""

n_events_per_file = 300

try:
    software = sys.argv[1]
    # specify the path to the software directory (where NuRadioMC, NuRadioReco and radiotools are installed in)
    working_dir   = sys.argv[2]
    #where you want the simulation to go
    conf_dir   = sys.argv[3]  # where are the config files
    event_files_dir = sys.argv[4]
    # Directory with simulations ()

except:
    print("Usage python A03generate_job_files.py software working_dir event_files_dir")
    print("Using default values")
    conf_dir = "/pub/arianna/NuRadioMC/examples/03_station_coincidences/"
    working_dir = conf_dir
    software = '/data/users/jcglaser/software'
    event_files_dir = os.path.join(working_dir, 'presim/output')

config_file = os.path.join(working_dir, 'config.yaml')


if not os.path.exists(os.path.join(working_dir, "output")):
    os.makedirs(os.path.join(working_dir, "output"))
if not os.path.exists(os.path.join(working_dir, "run")):
    os.makedirs(os.path.join(working_dir, "run"))
if not os.path.exists(os.path.join(working_dir, "input")):
    os.makedirs(os.path.join(working_dir, "input"))

for iI, filename in enumerate(sorted(glob.glob(os.path.join(event_files_dir,"*.hdf5")))):
    current_folder = os.path.splitext(os.path.basename(filename))[0]
    t1 = os.path.join(working_dir, "output", current_folder)
    if(not os.path.exists(t1)):
        os.makedirs(t1)
    t1 = os.path.join(working_dir, 'run', current_folder)
    if(not os.path.exists(t1)):
        os.makedirs(t1)
    t1 = os.path.join(working_dir, 'input', current_folder)
    if(not os.path.exists(t1)):
        os.makedirs(t1)

    output_filename = os.path.join(working_dir, 'input', current_folder, os.path.basename(filename))

    print('saving files to {}'.format(output_filename))

    generator.split_hdf5_input_file(filename, output_filename, n_events_per_file)

    for iF, filename2 in enumerate(sorted(glob.glob(os.path.join(working_dir, 'input', current_folder, "{}*".format(os.path.basename(output_filename[:-1])))))):
        print('generating job submission files for {}'.format(filename2))
        detector_file = os.path.join(working_dir, 'horizontal_spacing_detector.json')
        output_filename = os.path.join("output", current_folder, os.path.basename(filename2))
        cmd = "python {} {} {} {} {}\n".format(os.path.join(working_dir, 'E06RunSimPreprocess.py'), filename2,
                                               detector_file, config_file, output_filename)

        header = '#!/bin/bash\n'
        header += '#$ -N HS_{}_{}\n'.format(iI, iF)
        header += '#$ -j y\n'
        header += '#$ -V\n'
        header += '#$ -q grb,grb64\n'
#         header += '#$ -m \n'
        header += '#$ -o {}\n'.format(os.path.join(working_dir, 'run'))
        # add the software to the PYTHONPATH
        header += 'export PYTHONPATH={}/NuRadioMC:$PYTHONPATH\n'.format(software)
        header += 'export PYTHONPATH={}/NuRadioReco:$PYTHONPATH \n'.format(software)
        header += 'export PYTHONPATH={}/radiotools:$PYTHONPATH \n'.format(software)
        header += 'cd {} \n'.format(working_dir)

        with open(os.path.join('run', current_folder, os.path.basename(filename2) + ".sh"), 'w') as fout:
            fout.write(header)
            fout.write(cmd)
