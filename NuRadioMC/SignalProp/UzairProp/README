NOTE: Please look at testcode.C to see exactly how to use RayTraceRK4() function.

The main code that does all the calculations is called RayTraceRK4(). It basically takes in 9 argurments.

1st three arguments : x,y,z of the transmitter in ice

2nd three arguments : x,y,z of the reciever in ice

5th argument        :  "wsol" is what type of solution do you want:

Last two arguments  : "frequency" pointer to the array of frequencies in the signal and "tausize" size of the pointer

  //Find Direct Solutions
  wsol==0
  
  //Find Reflected Solutions
  wsol==1

  //Find Refracted Solutions
  wsol==2
  
  //Find Direct & Reflected Solutions
  wsol==3

  //Find Refracted & Reflected Solutions
  wsol==4

  //Find Direct,Refracted & Reflected Solutions
  wsol==5

The code returns you back a pointer to an array which you can use to get the Launch, Recieve and time (in seconds) of the ray. For example:

Double_t *getres=RayTraceRK4(800,0,-300,1000,0,-200,3);

getres[0]-> Launch angle of direct ray  in deg
getres[1]-> Recieve angle of direct ray in deg
getres[2]-> Time of direct ray in seconds

getres[3]-> Launch angle of reflected ray  in deg
getres[4]-> Recieve angle of reflected ray in deg
getres[5]-> Time of reflected ray in seconds

getres[6]-> Launch angle of refracted ray  in deg
getres[7]-> Recieve angle of refracted ray in deg
getres[8]-> Time of refracted ray in seconds

getres[9+tausize-1]-> Fraction of Amplitde left after attenuation at the frequency values specified in the array of tauszie length for Direct Rays

getres[tausize+tausize*2-1]-> Fraction of Amplitde left after attenuation at the frequency values specified in the array of tauszie length for Reflected Rays

getres[tausize*2+tausize*3-1]-> Fraction of Amplitde left after attenuation at the frequency values specified in the array of tauszie length for Refracted Rays

If the code does not find a solution then you will get:

getres[1]=-1
getres[4]=-1
getres[7]=-1

The function prints out the new launch angles in each iteration as it is zoning in on the target.

Have a look at /docs/html/RayTraceRK4_8C.html to understand the code structure better.

I would like to add that my code is a bit slow and I have not really optimised it to be fast yet so if you guys come up with any ideas let me know.

Please read raytracing_code.pdf for more detail. If you find any weird behaviour or any issues please let me know.

If you want to know how I derived the function to calculate launch angle read Der_LauAng.pdf.

The temperature model has been taken from AraSim which also took it from here http://icecube.wisc.edu/~araproject/radio/atten/ . This is basically Matt Newcomb's icecube directory which has alot of information, plots and codes about South Pole Ice activities. Please read it if you find it interesting: http://icecube.wisc.edu/~araproject/radio/#iceabsorbtion